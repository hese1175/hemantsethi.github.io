{"0": {
    "doc": "Association Rule Mining <b>(ARM)</b>",
    "title": "Association Rule Mining (ARM)",
    "content": ". | Overview | Data | Code | Results | . ",
    "url": "/docs/CSCI%205622%20-%20ML/models/arm/#association-rule-mining-arm",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/arm/#association-rule-mining-arm"
  },"1": {
    "doc": "Association Rule Mining <b>(ARM)</b>",
    "title": "Overview",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/arm/#overview",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/arm/#overview"
  },"2": {
    "doc": "Association Rule Mining <b>(ARM)</b>",
    "title": "Data",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/arm/#data",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/arm/#data"
  },"3": {
    "doc": "Association Rule Mining <b>(ARM)</b>",
    "title": "Code",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/arm/#code",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/arm/#code"
  },"4": {
    "doc": "Association Rule Mining <b>(ARM)</b>",
    "title": "Results",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/arm/#results",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/arm/#results"
  },"5": {
    "doc": "Association Rule Mining <b>(ARM)</b>",
    "title": "Association Rule Mining <b>(ARM)</b>",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/arm/",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/arm/"
  },"6": {
    "doc": "Clustering",
    "title": "Clustering",
    "content": ". | Overview | Data | Code | Results | . ",
    "url": "/docs/CSCI%205622%20-%20ML/models/clustering/",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/clustering/"
  },"7": {
    "doc": "Clustering",
    "title": "Overview",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/clustering/#overview",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/clustering/#overview"
  },"8": {
    "doc": "Clustering",
    "title": "Data",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/clustering/#data",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/clustering/#data"
  },"9": {
    "doc": "Clustering",
    "title": "Code",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/clustering/#code",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/clustering/#code"
  },"10": {
    "doc": "Clustering",
    "title": "Results",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/clustering/#results",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/clustering/#results"
  },"11": {
    "doc": "Conclusion",
    "title": "Conclusion",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/conclusion/",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/conclusion/"
  },"12": {
    "doc": "Data Preparation/EDA",
    "title": "Data Preparation/EDA",
    "content": ". | Introduction | Data Gathering - NewsAPI | Data Cleaning and Visualization - NewsAPI | Data Cleaning - OptiDAT Database | Prelim Exploratory Data Analysis - OptiDAT Database | . ",
    "url": "/docs/CSCI%205622%20-%20ML/data_prep/",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/data_prep/"
  },"13": {
    "doc": "Data Preparation/EDA",
    "title": "Introduction",
    "content": "The main data used for analysis is obtained from the OptiDAT Database. This data contains information about the mechanical properties of different composite materials used in wind turbine blades. The data is in the form of an Excel file. Furthermore, the NewsAPI is used to scrape news articles about the wind energy sector. This data is used to analyze the current trends and show the growing importance of recyclability in the wind energy sector. ",
    "url": "/docs/CSCI%205622%20-%20ML/data_prep/#introduction",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/data_prep/#introduction"
  },"14": {
    "doc": "Data Preparation/EDA",
    "title": "Data Gathering - NewsAPI",
    "content": "The NewsAPI is used to gather news articles about the wind energy sector and analyze the trends over the last couple decades. Here is the code that will be used to gather the articles: . import requests import re import pandas as pd import matplotlib.pyplot as plt from datetime import datetime # Connecting to NewsAPI and getting data end = 'https://newsapi.org/v2/everything' all_jsons = [] for page in range(1, 6): URL_id = {'apiKey' : 'de147731dffe48aa9effd3380691833b', 'q' : 'wind energy AND (recycle OR recycling OR recyclable OR recyclability)', 'from' : '1990-01-01', 'to' : datetime.now().strftime('%Y-%m-%d'), 'language' : 'en', 'pageSize' : 100, 'page' : page } response = requests.get(end, URL_id) jsontxt = response.json() all_jsons.append(jsontxt) . Data from all 5 pages are gathered in a list that will be used to create a DataFrame of articles. ",
    "url": "/docs/CSCI%205622%20-%20ML/data_prep/#data-gathering---newsapi",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/data_prep/#data-gathering---newsapi"
  },"15": {
    "doc": "Data Preparation/EDA",
    "title": "Data Cleaning and Visualization - NewsAPI",
    "content": "# Create a DataFrame from the articles df = pd.DataFrame(all_articles) # Convert the publishedAt column to datetime df['publishedAt'] = pd.to_datetime(df['publishedAt']) # Extract the year from the publishedAt column df['year'] = df['publishedAt'].dt.year # Group by year and count the number of articles trends = df.groupby('year').size().reset_index(name='article_count') # Plot the trends fig, ax = plt.subplots() ax.plot(trends['year'], trends['article_count'], marker='o') ax.set_title('Trends in Wind Energy and Recyclability Articles (1990-Present)') ax.set_xlabel('Year') ax.set_ylabel('Number of Articles') . This idea did not work as expected due to the restrictions on the free version of the NewsAPI platform. The oldest data available was from 8-17-2024 so only one month. In the next iteration, the data will be gathered from a different source so that the trends can be analyzed. Regardless, the data from the OptiDAT database has been gathered, cleaned and run through a preliminary analysis as shown below. ",
    "url": "/docs/CSCI%205622%20-%20ML/data_prep/#data-cleaning-and-visualization---newsapi",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/data_prep/#data-cleaning-and-visualization---newsapi"
  },"16": {
    "doc": "Data Preparation/EDA",
    "title": "Data Cleaning - OptiDAT Database",
    "content": "The OptiDAT data is in the form of an Excel file. The main data is in the OPTIMAT Database sheetname. It consists of 93 columns and 3435 rows. The columns contain information about the material properties, such as density, tensile strength, compressive strength, etc. The rows contain data about different composite materials that were tested as part of the study. Here is a snippet of the raw data: . Using python, the raw data is loaded into a pandas dataframe. import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns file_name = './data/Optidat_dataset.xls' loc = os.getcwd() file_loc = os.path.join(loc,file_name) raw_data = pd.read_excel(file_loc, sheet_name='OPTIMAT Database', header=4) print('Raw Data Info: \\n') print(raw_data.info()) . Here is a look at the data summary. Raw Data Info: &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 3435 entries, 0 to 3434 Data columns (total 93 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 Optidat version: February 10, 2011 0 non-null float64 1 optiDAT nr. 3435 non-null int64 2 Name 3435 non-null object 3 Plate 3435 non-null object 4 Fibre Volume Fraction 3031 non-null float64 5 Lab 3435 non-null object 6 Laminate 3435 non-null object 7 Cut angle 3435 non-null object 8 Manufacturer 3435 non-null object 9 Geometry 3435 non-null object 10 Material 3435 non-null object 11 taverage 3232 non-null object 12 wmax 2084 non-null float64 13 wmin 2814 non-null float64 14 waverage 3181 non-null float64 15 area 3181 non-null float64 16 Lnominal 3435 non-null object 17 Lmeasured 836 non-null float64 18 Lgauge 2105 non-null float64 19 Radius (waist) 92 non-null float64 20 TG and phase 3435 non-null object 21 Phase 3435 non-null object 22 start date 3253 non-null datetime64[ns] 23 end date 3143 non-null datetime64[ns] 24 Test type 3319 non-null object 25 R-value1 2003 non-null object 26 Fmax 3256 non-null float64 27 Ferror 0 non-null float64 28 Fstatic 1788 non-null float64 29 Ffatigue 2045 non-null float64 30 Fmax, 90° 122 non-null float64 31 epsmax 1871 non-null float64 32 epsstatic 992 non-null float64 33 epsfatigue 977 non-null float64 34 eps90° 112 non-null float64 35 eps45° 136 non-null float64 36 Nu 286 non-null float64 37 smax 3035 non-null float64 38 smax,static 1627 non-null float64 39 smax, fatigue 1976 non-null float64 40 shear strain 95 non-null float64 41 shear strength 115 non-null float64 42 shear modulus (near other moduli) 127 non-null float64 43 Torquemax 1311 non-null float64 44 Torquefatigue 50 non-null float64 45 Torquestatic 51 non-null float64 46 Ncycles 3300 non-null object 47 level 1484 non-null object 48 levelcalc 1984 non-null object 49 Nspectrum 100 non-null float64 50 failure mode 1560 non-null object 51 runout 51 non-null object 52 R-value2 142 non-null float64 53 Fmax2 221 non-null float64 54 epsmax2 87 non-null float64 55 smax2 142 non-null float64 56 Ncycles2 141 non-null float64 57 ratedisplacement 1516 non-null object 58 f 2038 non-null object 59 f2 142 non-null float64 60 Eit 1837 non-null float64 61 Eic 1416 non-null object 62 Eft 398 non-null float64 63 Efc 168 non-null float64 64 Elur,front 9 non-null object 65 Elur, back 9 non-null object 66 eps_max_t 1096 non-null float64 67 eps_max_c 700 non-null float64 68 Machine 3345 non-null object 69 control 3125 non-null object 70 grip 3108 non-null object 71 ABG 2574 non-null object 72 Temp. 718 non-null object 73 Temp. control 1779 non-null object 74 Environment 3435 non-null object 75 Reference document 2552 non-null object 76 Remarks 1847 non-null object 77 Invalid 165 non-null object 78 Bending 167 non-null object 79 Buckling 55 non-null object 80 Overheating 28 non-null object 81 Tab failure 262 non-null object 82 Delaminated 22 non-null object 83 Incomplete measurement data 207 non-null object 84 Strain from E 29 non-null object 85 LUR 217 non-null object 86 TEC 50 non-null float64 87 data delivered under name 803 non-null object 88 Repair characteristics 167 non-null object 89 Strain measurement equipment (long) 2209 non-null object 90 Strain measurement equipment (short) 2225 non-null object 91 Grip pressure 1876 non-null object 92 time per test 2909 non-null float64 dtypes: datetime64[ns](2), float64(43), int64(1), object(47) . Now, the data is cleaned by removing columns that are not needed for analysis. The columns are removed as follows: . # Remove whitespace leading and trailing column names data.rename(columns=lambda x: x.strip(), inplace=True) column_list = ['Name', 'Fibre Volume Fraction', 'Material','Test type', 'smax,static','smax, fatigue','epsstatic','epsfatigue', 'Ncycles','Eit','Eic', 'Invalid','Incomplete measurement data'] data = data.filter(column_list) data.info() . &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 3435 entries, 0 to 3434 Data columns (total 13 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 Name 3435 non-null object 1 Fibre Volume Fraction 3031 non-null float64 2 Material 3435 non-null object 3 Test type 3319 non-null object 4 smax,static 1627 non-null float64 5 smax, fatigue 1976 non-null float64 6 epsstatic 992 non-null float64 7 epsfatigue 977 non-null float64 8 Ncycles 3300 non-null object 9 Eit 1837 non-null float64 10 Eic 1416 non-null object 11 Invalid 165 non-null object 12 Incomplete measurement data 207 non-null object dtypes: float64(6), object(7) . Two important columns to easily remove data is by looking at the Invalid data column and the Incomplete measurement data column. If the data is invalid or incomplete, it is removed from the dataset. Also, rows that do not have a designated test type are removed. # Remove rows for data that is Invalid data = data[data['Invalid'].isna()] print('Total Invalid Data:',data['Invalid'].notna().sum()) # Remove rows for data that is Incomplete data = data[data['Incomplete measurement data'].isna()] print('Total Incomplete measurement Data:',data['Incomplete measurement data'].notna().sum()) # Drop the two columns data.drop(['Invalid','Incomplete measurement data'],axis=1,inplace=True) # Remove rows that do not have a test type data = data[data['Test type'].notna()] data.info() . Here is the current state of columns and data types: . &lt;class 'pandas.core.frame.DataFrame'&gt; Index: 3068 entries, 0 to 3433 Data columns (total 11 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 Name 3068 non-null object 1 Fibre Volume Fraction 2729 non-null float64 2 Material 3068 non-null object 3 Test type 3068 non-null object 4 smax,static 1518 non-null float64 5 smax, fatigue 1752 non-null float64 6 epsstatic 961 non-null float64 7 epsfatigue 927 non-null float64 8 Ncycles 2983 non-null object 9 Eit 1759 non-null float64 10 Eic 1336 non-null object dtypes: float64(6), object(5) . Now we correct the data types for the columns. The Name column is temporarily left as an object dtype. More on this will be discussed later. The Test type and Material columns are also converted to a category data type. Finally, the Ncycles and Eic columns are to be converted to a float data type. # Change data types data['Material'] = data['Material'].astype('category') data['Test type'] = data['Test type'].astype('category') data['Ncycles'] = data['Ncycles'].astype('float64') data['Eic'] = data['Eic'].astype('float64') . The dtype conversion of data['Eic'] is showing an error because of a string value in the column. First we need to find all the string values in the column. # Eic should both be all float or int for i,u in enumerate(data['Eic']): if type(u) == str: print(i, u) . Row 325 has an error for Eic data; value has whitespaces ' '. This is corrected by converting the string to a np.nan value. data['Eic'] = np.where(data['Eic'] == ' ', np.nan, data['Eic']) # Try changing dtype again data['Eic'] = data['Eic'].astype('float64') # check with data.info() or data.describe() data.info() . &lt;class 'pandas.core.frame.DataFrame'&gt; Index: 3068 entries, 0 to 3433 Data columns (total 11 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 Name 3068 non-null object 1 Fibre Volume Fraction 2729 non-null float64 2 Material 3068 non-null category 3 Test type 3068 non-null category 4 smax,static 1518 non-null float64 5 smax, fatigue 1752 non-null float64 6 epsstatic 961 non-null float64 7 epsfatigue 927 non-null float64 8 Ncycles 2983 non-null float64 9 Eit 1759 non-null float64 10 Eic 1335 non-null float64 dtypes: category(2), float64(8), object(1) . Fibre Volume Fraction smax,static smax, fatigue epsstatic epsfatigue Ncycles Eit Eic count 2729.000 1518.000 1752.000 961.000 927.000 2983.000 1759.000 1335.000 mean 45.004 113.787 127.534 0.672 0.454 345061.136 26.331 29.376 std 18.919 476.216 221.863 1.872 0.698 1514505.719 9.902 8.981 min 0.000 -5274.270 -511.466 -3.846 -1.666 0.000 0.778 10.750 25% 50.868 -387.185 42.627 -1.332 0.173 1.000 14.670 25.800 50% 52.480 102.466 181.912 1.300 0.608 2452.000 27.530 28.619 75% 53.730 505.058 264.490 2.121 0.910 91196.000 34.600 38.200 max 56.660 1156.504 761.461 8.080 1.970 39393907.000 49.300 57.160 . ",
    "url": "/docs/CSCI%205622%20-%20ML/data_prep/#data-cleaning---optidat-database",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/data_prep/#data-cleaning---optidat-database"
  },"17": {
    "doc": "Data Preparation/EDA",
    "title": "Prelim Exploratory Data Analysis - OptiDAT Database",
    "content": "The data looks relatively clean and ready for some exploratory data analysis with visualizations. Visualizing the data can be helpful to clean the data further. Looking at the raw data, the test type column has a lot of unique values. It might be helpful to visualize the top 10 test types. # Start by visualizing all Test Types # tt = data['Test type'].unique() # Test type pie chart (Top 10) tt_counts = data['Test type'].value_counts() print(tt_counts) if plot: fig, ax = plt.subplots() fig.suptitle('Top 10 test types and total replicates', size=20) ax.pie(tt_counts[:10], autopct=lambda p: '{:.0f}'.format(p * sum(tt_counts[:10]) / 100), labels = tt_counts.index[:10]) . tt_counts shows that the test type column has 83 unique values. The top 10 test types are shown in the pie chart. To narrow the analysis and only include the important test types, top 3 test types are selected. The data is filtered to only include the top 3 test types - STT (Static Tensile), STC (Static Compression) and CA (Constant Amplitude Fatigue). # Only keep CA, STT, and STC tt_list = ['STT','STC','CA'] data = data[data['Test type'].isin(tt_list)] # Plot the top 3 test types if plot: fig, ax = plt.subplots() fig.suptitle('Top 3 test types and total replicates', size=20) ax.pie(tt_counts[:3], autopct=lambda p: '{:.0f}'.format(p * sum(tt_counts[:3]) / 100), labels = tt_counts[:3].index) plt.savefig('./imgs/Pie_Chart_T3.png') . The preliminary data can be further grouped and analyzed by the major differtiator i.e. Test type. # Group data by Test Type for visualizations tt_group = data.groupby('Test type', observed=True) tensile_data = tt_group.get_group('STT') compression_data = tt_group.get_group('STC') fatigue_data = tt_group.get_group('CA') # data head for tensile tests tensile_data.head(10) . Here is the data for the initial 10 tensile tests. Similar data are grouped for compression and fatigue (CA) tests. Name Fibre Volume Fraction Material Test type smax,static smax, fatigue epsstatic epsfatigue Ncycles Eit Eic 5 GEV201_D0100_0016 NaN GE1 STT 812.248 NaN 2.104 NaN 1.000 44.578 NaN 9 GEV201_D0100_0031 NaN GE1 STT 859.098 NaN 2.148 NaN 1.000 44.911 NaN 10 GEV201_R0100_0001 NaN GE1 STT 879.473 NaN NaN NaN 1.000 39.430 NaN 14 GEV201_R0100_0011 NaN GE1 STT 841.836 NaN NaN NaN 1.000 39.523 NaN 20 GEV201_R0100_0026 NaN GE1 STT 751.744 NaN -1.960 NaN 1.000 39.190 NaN 26 GEV202_D0100_0001 NaN GE1 STT 712.281 NaN NaN NaN 1.000 NaN NaN 28 GEV202_D0100_0006 NaN GE1 STT 688.875 NaN NaN NaN 1.000 NaN NaN 38 GEV202_R0100_0006 NaN GE1 STT 689.609 NaN NaN NaN 1.000 NaN NaN 40 GEV202_R0100_0011 NaN GE1 STT 675.225 NaN NaN NaN 1.000 NaN NaN 59 GEV203_R0100_0001 NaN GE1 STT 483.126 NaN NaN NaN 1.000 NaN NaN . np.nan values in certain columns are expected as fatigue related test data will not be available for tensile and compression tests and vice versa. Some easy visualizations can be done to understand the data better. For example, a box or violin plot to show the distribution of the data. But first, the stress data for tensile must be cleaned to remove invalid values (negative values) and outliers. # Cleaning tensile data tensile_data = tensile_data[tensile_data['smax,static']&gt;0] tensile_data.dropna(subset=['smax,static'], inplace=True) # Visualize the data if plot: fig, ax = plt.subplots() sns.violinplot(data=tensile_data, y='smax,static', ax=ax) ax.set_xlabel('Probability Distribution Function (width ~ frequency)', size=10) ax.set_ylabel(r'Max Stress - $\\sigma_{max}$ (MPa) ', size=10) ax.set_title('Tensile Test Max Stress Distribution', size=16) plt.savefig('./imgs/tensile_max_stress_dist.png') . Similarly the data for compression and fatigue tests can be cleaned and visualized. if plot: fig, ax = plt.subplots() sns.violinplot(data=compression_data, y='smax,static', ax=ax) ax.set_xlabel('Probability Distribution Function (width ~ frequency)', size=10) ax.set_ylabel(r'Max Stress - $\\sigma_{max}$ (MPa) ', size=10) ax.set_title('Compression Test Max Stress Distribution', size=16) plt.savefig('./imgs/compression_max_stress_dist_not-clean.png') . However, we see that the compression data has some values that are positive. This is not expected for compression tests. The data is cleaned by removing the positive values. # Cleaning compression data compression_data = compression_data[compression_data['smax,static']&lt;0] compression_data.dropna(subset=['smax,static'], inplace=True) if plot: fig, ax = plt.subplots() sns.violinplot(data=compression_data, y='smax,static', ax=ax) ax.set_xlabel('Probability Distribution Function (width ~ frequency)', size=10) ax.set_ylabel(r'Max Stress - $\\sigma_{max}$ (MPa) ', size=10) ax.set_title('Compression Test Max Stress Distribution', size=16) plt.savefig('./imgs/compression_max_stress_dist.png') . Finally, the fatigue max stress data smax, fatigue is plotted. if plot: fig, ax = plt.subplots() sns.violinplot(data=fatigue_data, y='smax, fatigue', ax=ax) ax.set_xlabel('Probability Distribution Function (width ~ frequency)', size=10) ax.set_ylabel(r'Max Stress (Fatigue) - $\\sigma_{max}$ (MPa) ', size=10) ax.set_title('Fatigue Test Max Stress Distribution', size=16) plt.savefig('./imgs/fatigue_max_stress_dist.png') . There is more to the fatigue data than just max stress. The values can be negative if the ratio of min to max stress is not 1. The ratio data is available in the R-value1 column and will be utilized in the analysis later. Now, the fatigue Ncycles data is visualized. Generally, this is done in a log plot. # Plot Ncycles as a function of smax, fatigue if plot: fig, ax = plt.subplots() sns.scatterplot(data=fatigue_data, x='Ncycles', y='smax, fatigue', ax=ax,) ax.set_xscale('log') ax.set_xlabel('Number of cycles till failure', size=10) ax.set_ylabel(r'Max Stress (Fatigue) - $\\sigma_{max}$ (MPa) ', size=10) ax.set_title('S-N Curve for Fatigue data', size=16) plt.savefig('./imgs/fatigue_SN-curve.png') . There might be a relation to the material so the same plot is done with a hue for the material. # Same plot, Hue for material if plot: fig, ax = plt.subplots() sns.scatterplot(data=fatigue_data, x='Ncycles', y='smax, fatigue', ax=ax, hue='Material') ax.set_xscale('log') ax.set_xlabel('Number of cycles till failure', size=10) ax.set_ylabel(r'Max Stress (Fatigue) - $\\sigma_{max}$ (MPa) ', size=10) ax.set_title('S-N Curve for Fatigue data, Hue-Material', size=16) plt.savefig('./imgs/fatigue_SN-curve_Material-hue.png') . Moving back to the tensile data, the tensile modulus data Eit is visualized as a function of the Fiber Volume Fraction in the material. # Check relation between Fiber Volume and Modulus for tensile data if plot: fig, ax = plt.subplots() sns.scatterplot(data=tensile_data, x='Fibre Volume Fraction', y='Eit', ax=ax) ax.set_xlabel('Fibre Volume Fraction (%)', size=10) ax.set_ylabel(r'Elastic Modulus $E_t$ (MPa) ', size=10) ax.set_title('Modulus vs FVF', size=16) plt.savefig('./imgs/E-vs-FVF.png') . Looks like there are two distinct groups in the data. This will be investigated later in the study. All the plots are available in the Introduction section of the project as per the guidelines. ",
    "url": "/docs/CSCI%205622%20-%20ML/data_prep/#prelim-exploratory-data-analysis---optidat-database",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/data_prep/#prelim-exploratory-data-analysis---optidat-database"
  },"18": {
    "doc": "Decision Trees <b>(DT)</b>",
    "title": "Decision Trees (DT)",
    "content": ". | Overview | Data | Code | Results | . ",
    "url": "/docs/CSCI%205622%20-%20ML/models/dt/#decision-trees-dt",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/dt/#decision-trees-dt"
  },"19": {
    "doc": "Decision Trees <b>(DT)</b>",
    "title": "Overview",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/dt/#overview",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/dt/#overview"
  },"20": {
    "doc": "Decision Trees <b>(DT)</b>",
    "title": "Data",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/dt/#data",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/dt/#data"
  },"21": {
    "doc": "Decision Trees <b>(DT)</b>",
    "title": "Code",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/dt/#code",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/dt/#code"
  },"22": {
    "doc": "Decision Trees <b>(DT)</b>",
    "title": "Results",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/dt/#results",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/dt/#results"
  },"23": {
    "doc": "Decision Trees <b>(DT)</b>",
    "title": "Decision Trees <b>(DT)</b>",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/dt/",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/dt/"
  },"24": {
    "doc": "CSCI 5622 - ML",
    "title": "CSCI 5622 - Machine Learning",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/index-CSCI/#csci-5622---machine-learning",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/index-CSCI/#csci-5622---machine-learning"
  },"25": {
    "doc": "CSCI 5622 - ML",
    "title": "CSCI 5622 - ML",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/index-CSCI/",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/index-CSCI/"
  },"26": {
    "doc": "Home",
    "title": "Welcome to Hemant’s Personal Website",
    "content": ". ",
    "url": "/#welcome-to-hemants-personal-website",
    
    "relUrl": "/#welcome-to-hemants-personal-website"
  },"27": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/",
    
    "relUrl": "/"
  },"28": {
    "doc": "Models/Methods",
    "title": "Model/Methods",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/index-models/#modelmethods",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/index-models/#modelmethods"
  },"29": {
    "doc": "Models/Methods",
    "title": "Models/Methods",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/index-models/",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/index-models/"
  },"30": {
    "doc": "Introduction",
    "title": "Introduction",
    "content": ". | Wind Energy . | Raw Data Image | Cleaned Data Image | Visualization Images | . | . ",
    "url": "/docs/CSCI%205622%20-%20ML/introduction/",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/introduction/"
  },"31": {
    "doc": "Introduction",
    "title": "Wind Energy",
    "content": "Wind energy is a key component in the mitigation strategy for climate change. It has grown into a significant sector in the global renewable energy landscape. However, the growth has not been fast enough to meet the climate change targets. The wind energy sector is facing challenges in terms of cost, reliability, efficiency and more recently, recyclability. Wind blades are one of the most expensive components of the turbine as well as the most difficult to recycle. Recyclable wind turbines will help reduce cost by enabling the reuse of expensive materials while reducing waste. This will help wind energy become more competitive in the renewable energy space. This project will aim to address the recyclability of wind blades. The project will focus on the development of a machine learning model to analyze characteristics of current renewable, recyclable composite materials, and compare their properties to that of traditional materials (epoxy and fiberglass). There is a need for new technologies and innovations to address these challenges and make wind energy more competitive in the renewable energy space. Raw Data Image . Cleaned Data Image . Visualization Images . All the images below are visualizations of the data. The code is available in the date_prep tab as well as the process of data cleaning and visualization. Please refer to that tab for more information. Pie chart shows the top 10 test types in the whole dataset . Pie chart shows the top 3 most important test types in the whole dataset . Violin plot showing the distribution of max stress in tensile data for all materials . Violin plot of max stress in compression data. This showed some positive values which needed to be removed . Violin plot of max stress in compression data after removing positive values . Side by side comparison showing the raw and clean data . Violin plot of max stress in fatigue data . Scatter plot showing SN curve relation for fatigue tests . Scatter plot showing the S-N curve for fatigue tests with material hue . Scatter plot showing the relationship between tensile modulus and fiber volume fraction. The plot shows two distinct groups which will be investigated later. Raw data is available on the GitHub repository. OptiDAT dataset . Code used is also available on the GitHub repository. Data Prep Code Prelim NewsAPI code . Images are available in the assets/imgs folder. Images and Plots . ",
    "url": "/docs/CSCI%205622%20-%20ML/introduction/#wind-energy",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/introduction/#wind-energy"
  },"32": {
    "doc": "Naive Bayes <b>(NB)</b>",
    "title": "Naive Bayes (NB)",
    "content": ". | Overview | Data | Code | Results | . ",
    "url": "/docs/CSCI%205622%20-%20ML/models/nb/#naive-bayes-nb",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/nb/#naive-bayes-nb"
  },"33": {
    "doc": "Naive Bayes <b>(NB)</b>",
    "title": "Overview",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/nb/#overview",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/nb/#overview"
  },"34": {
    "doc": "Naive Bayes <b>(NB)</b>",
    "title": "Data",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/nb/#data",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/nb/#data"
  },"35": {
    "doc": "Naive Bayes <b>(NB)</b>",
    "title": "Code",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/nb/#code",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/nb/#code"
  },"36": {
    "doc": "Naive Bayes <b>(NB)</b>",
    "title": "Results",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/nb/#results",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/nb/#results"
  },"37": {
    "doc": "Naive Bayes <b>(NB)</b>",
    "title": "Naive Bayes <b>(NB)</b>",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/nb/",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/nb/"
  },"38": {
    "doc": "Principal Component Analysis <b>(PCA)</b>",
    "title": "Principal Component Analysis (PCA)",
    "content": ". | Overview | Data | Code | Results | . ",
    "url": "/docs/CSCI%205622%20-%20ML/models/pca/#principal-component-analysis-pca",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/pca/#principal-component-analysis-pca"
  },"39": {
    "doc": "Principal Component Analysis <b>(PCA)</b>",
    "title": "Overview",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/pca/#overview",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/pca/#overview"
  },"40": {
    "doc": "Principal Component Analysis <b>(PCA)</b>",
    "title": "Data",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/pca/#data",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/pca/#data"
  },"41": {
    "doc": "Principal Component Analysis <b>(PCA)</b>",
    "title": "Code",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/pca/#code",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/pca/#code"
  },"42": {
    "doc": "Principal Component Analysis <b>(PCA)</b>",
    "title": "Results",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/pca/#results",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/pca/#results"
  },"43": {
    "doc": "Principal Component Analysis <b>(PCA)</b>",
    "title": "Principal Component Analysis <b>(PCA)</b>",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/pca/",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/pca/"
  },"44": {
    "doc": "Regression",
    "title": "Regression",
    "content": ". | Overview | Data | Code | Results | . ",
    "url": "/docs/CSCI%205622%20-%20ML/models/regression/",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/regression/"
  },"45": {
    "doc": "Regression",
    "title": "Overview",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/regression/#overview",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/regression/#overview"
  },"46": {
    "doc": "Regression",
    "title": "Data",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/regression/#data",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/regression/#data"
  },"47": {
    "doc": "Regression",
    "title": "Code",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/regression/#code",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/regression/#code"
  },"48": {
    "doc": "Regression",
    "title": "Results",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/regression/#results",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/regression/#results"
  },"49": {
    "doc": "Support Vector Machines <b>(SVM)</b>",
    "title": "Support Vector Machines (SVM)",
    "content": ". | Overview | Data | Code | Results | . ",
    "url": "/docs/CSCI%205622%20-%20ML/models/svm/#support-vector-machines-svm",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/svm/#support-vector-machines-svm"
  },"50": {
    "doc": "Support Vector Machines <b>(SVM)</b>",
    "title": "Overview",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/svm/#overview",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/svm/#overview"
  },"51": {
    "doc": "Support Vector Machines <b>(SVM)</b>",
    "title": "Data",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/svm/#data",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/svm/#data"
  },"52": {
    "doc": "Support Vector Machines <b>(SVM)</b>",
    "title": "Code",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/svm/#code",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/svm/#code"
  },"53": {
    "doc": "Support Vector Machines <b>(SVM)</b>",
    "title": "Results",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/svm/#results",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/svm/#results"
  },"54": {
    "doc": "Support Vector Machines <b>(SVM)</b>",
    "title": "Support Vector Machines <b>(SVM)</b>",
    "content": " ",
    "url": "/docs/CSCI%205622%20-%20ML/models/svm/",
    
    "relUrl": "/docs/CSCI%205622%20-%20ML/models/svm/"
  }
}
